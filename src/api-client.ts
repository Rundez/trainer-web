//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export interface IClient {

    /**
     * @return Success
     */
    exerciseAll(): Promise<ExerciseDto[]>;

    /**
     * @param body (optional) 
     * @return Created
     */
    exercisePOST(body: ExerciseCreateDto | undefined): Promise<ExerciseDto>;

    /**
     * @return Success
     */
    exerciseGET(id: number): Promise<ExerciseDto>;

    /**
     * @param body (optional) 
     * @return No Content
     */
    exercisePUT(id: number, body: ExerciseCreateDto | undefined): Promise<void>;

    /**
     * @return No Content
     */
    exerciseDELETE(id: number): Promise<void>;

    /**
     * @return Success
     */
    byMuscleId(id: number): Promise<ExerciseDto[]>;

    /**
     * @return Success
     */
    muscleAll(): Promise<MuscleDto[]>;

    /**
     * @param body (optional) 
     * @return Created
     */
    musclePOST(body: MuscleCreateDto | undefined): Promise<MuscleDto>;

    /**
     * @return Success
     */
    muscleGET(id: number): Promise<MuscleDto>;

    /**
     * @param body (optional) 
     * @return No Content
     */
    musclePUT(id: number, body: MuscleCreateDto | undefined): Promise<void>;

    /**
     * @return No Content
     */
    muscleDELETE(id: number): Promise<void>;

    /**
     * @return Success
     */
    byExerciseIdId(id: number): Promise<MuscleDto[]>;

    /**
     * @return Success
     */
    setAll(): Promise<SetDto[]>;

    /**
     * @param body (optional) 
     * @return Created
     */
    setPOST(body: SetCreateDto | undefined): Promise<SetDto>;

    /**
     * @return Success
     */
    setGET(id: number): Promise<SetDto>;

    /**
     * @param body (optional) 
     * @return No Content
     */
    setPUT(id: number, body: SetCreateDto | undefined): Promise<void>;

    /**
     * @return No Content
     */
    setDELETE(id: number): Promise<void>;

    /**
     * @return Success
     */
    byWorkoutId(workoutId: number): Promise<SetDto[]>;

    /**
     * @return Success
     */
    trainingProgramAll(): Promise<ProgramSummaryDto[]>;

    /**
     * @param body (optional) 
     * @return Created
     */
    trainingProgramPOST(body: TrainingProgramCreateDto | undefined): Promise<TrainingProgramDto>;

    /**
     * @return Success
     */
    trainingProgramGET(id: number): Promise<TrainingProgramDto>;

    /**
     * @param body (optional) 
     * @return No Content
     */
    trainingProgramPUT(id: number, body: TrainingProgramUpdateDto | undefined): Promise<void>;

    /**
     * @return No Content
     */
    trainingProgramDELETE(id: number): Promise<void>;

    /**
     * @param body (optional) 
     * @return No Content
     */
    weeksPOST(programId: number, body: TrainingProgramWeekCreateDto | undefined): Promise<void>;

    /**
     * @return No Content
     */
    weeksDELETE(programId: number, weekId: number): Promise<void>;

    /**
     * @param body (optional) 
     * @return No Content
     */
    weeksPUT(programId: number, weekId: number, body: TrainingProgramWeekUpdateDto | undefined): Promise<void>;

    /**
     * @param body (optional) 
     * @return No Content
     */
    workoutsPOST(programId: number, weekId: number, body: TrainingProgramWorkoutCreateDto | undefined): Promise<void>;

    /**
     * @param body (optional) 
     * @return No Content
     */
    workoutsPUT(programId: number, weekId: number, workoutId: number, body: TrainingProgramWorkoutUpdateDto | undefined): Promise<void>;

    /**
     * @return No Content
     */
    workoutsDELETE(programId: number, weekId: number, workoutId: number): Promise<void>;

    /**
     * @param body (optional) 
     * @return No Content
     */
    exercisesPOST(programId: number, weekId: number, workoutId: number, body: TrainingProgramExerciseCreateDto | undefined): Promise<void>;

    /**
     * @param body (optional) 
     * @return No Content
     */
    exercisesPUT(programId: number, weekId: number, workoutId: number, exerciseId: number, body: TrainingProgramExerciseUpdateDto | undefined): Promise<void>;

    /**
     * @return No Content
     */
    exercisesDELETE(programId: number, weekId: number, workoutId: number, exerciseId: number): Promise<void>;

    /**
     * @return Success
     */
    getWeatherForecast(): Promise<WeatherForecast[]>;

    /**
     * @return Success
     */
    workoutAll(): Promise<WorkoutDto[]>;

    /**
     * @param body (optional) 
     * @return Created
     */
    workoutPOST(body: WorkoutCreateDto | undefined): Promise<WorkoutDto>;

    /**
     * @return Success
     */
    workoutGET(id: number): Promise<WorkoutDto>;

    /**
     * @param body (optional) 
     * @return No Content
     */
    workoutPUT(id: number, body: WorkoutCreateDto | undefined): Promise<void>;

    /**
     * @return No Content
     */
    workoutDELETE(id: number): Promise<void>;

    /**
     * @param ids (optional) 
     * @return Success
     */
    workoutsByIds(ids: number[] | undefined): Promise<WorkoutDto[]>;

    /**
     * @return No Content
     */
    start(id: number): Promise<void>;

    /**
     * @return No Content
     */
    complete(id: number): Promise<void>;
}

export class Client implements IClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return Success
     */
    exerciseAll(): Promise<ExerciseDto[]> {
        let url_ = this.baseUrl + "/Exercise";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processExerciseAll(_response);
        });
    }

    protected processExerciseAll(response: Response): Promise<ExerciseDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ExerciseDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ExerciseDto[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Created
     */
    exercisePOST(body: ExerciseCreateDto | undefined): Promise<ExerciseDto> {
        let url_ = this.baseUrl + "/Exercise";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processExercisePOST(_response);
        });
    }

    protected processExercisePOST(response: Response): Promise<ExerciseDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = ExerciseDto.fromJS(resultData201);
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ExerciseDto>(null as any);
    }

    /**
     * @return Success
     */
    exerciseGET(id: number): Promise<ExerciseDto> {
        let url_ = this.baseUrl + "/Exercise/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processExerciseGET(_response);
        });
    }

    protected processExerciseGET(response: Response): Promise<ExerciseDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExerciseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ExerciseDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return No Content
     */
    exercisePUT(id: number, body: ExerciseCreateDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Exercise/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processExercisePUT(_response);
        });
    }

    protected processExercisePUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return No Content
     */
    exerciseDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/Exercise/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processExerciseDELETE(_response);
        });
    }

    protected processExerciseDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    byMuscleId(id: number): Promise<ExerciseDto[]> {
        let url_ = this.baseUrl + "/Exercise/byMuscleId/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processByMuscleId(_response);
        });
    }

    protected processByMuscleId(response: Response): Promise<ExerciseDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ExerciseDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ExerciseDto[]>(null as any);
    }

    /**
     * @return Success
     */
    muscleAll(): Promise<MuscleDto[]> {
        let url_ = this.baseUrl + "/Muscle";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMuscleAll(_response);
        });
    }

    protected processMuscleAll(response: Response): Promise<MuscleDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MuscleDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MuscleDto[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Created
     */
    musclePOST(body: MuscleCreateDto | undefined): Promise<MuscleDto> {
        let url_ = this.baseUrl + "/Muscle";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMusclePOST(_response);
        });
    }

    protected processMusclePOST(response: Response): Promise<MuscleDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = MuscleDto.fromJS(resultData201);
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MuscleDto>(null as any);
    }

    /**
     * @return Success
     */
    muscleGET(id: number): Promise<MuscleDto> {
        let url_ = this.baseUrl + "/Muscle/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMuscleGET(_response);
        });
    }

    protected processMuscleGET(response: Response): Promise<MuscleDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MuscleDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MuscleDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return No Content
     */
    musclePUT(id: number, body: MuscleCreateDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Muscle/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMusclePUT(_response);
        });
    }

    protected processMusclePUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return No Content
     */
    muscleDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/Muscle/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMuscleDELETE(_response);
        });
    }

    protected processMuscleDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    byExerciseIdId(id: number): Promise<MuscleDto[]> {
        let url_ = this.baseUrl + "/Muscle/byExerciseIdId/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processByExerciseIdId(_response);
        });
    }

    protected processByExerciseIdId(response: Response): Promise<MuscleDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MuscleDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MuscleDto[]>(null as any);
    }

    /**
     * @return Success
     */
    setAll(): Promise<SetDto[]> {
        let url_ = this.baseUrl + "/Set";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetAll(_response);
        });
    }

    protected processSetAll(response: Response): Promise<SetDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SetDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SetDto[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Created
     */
    setPOST(body: SetCreateDto | undefined): Promise<SetDto> {
        let url_ = this.baseUrl + "/Set";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetPOST(_response);
        });
    }

    protected processSetPOST(response: Response): Promise<SetDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = SetDto.fromJS(resultData201);
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SetDto>(null as any);
    }

    /**
     * @return Success
     */
    setGET(id: number): Promise<SetDto> {
        let url_ = this.baseUrl + "/Set/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetGET(_response);
        });
    }

    protected processSetGET(response: Response): Promise<SetDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SetDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SetDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return No Content
     */
    setPUT(id: number, body: SetCreateDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Set/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetPUT(_response);
        });
    }

    protected processSetPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return No Content
     */
    setDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/Set/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetDELETE(_response);
        });
    }

    protected processSetDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    byWorkoutId(workoutId: number): Promise<SetDto[]> {
        let url_ = this.baseUrl + "/Set/byWorkoutId/{workoutId}";
        if (workoutId === undefined || workoutId === null)
            throw new Error("The parameter 'workoutId' must be defined.");
        url_ = url_.replace("{workoutId}", encodeURIComponent("" + workoutId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processByWorkoutId(_response);
        });
    }

    protected processByWorkoutId(response: Response): Promise<SetDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SetDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SetDto[]>(null as any);
    }

    /**
     * @return Success
     */
    trainingProgramAll(): Promise<ProgramSummaryDto[]> {
        let url_ = this.baseUrl + "/TrainingProgram";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTrainingProgramAll(_response);
        });
    }

    protected processTrainingProgramAll(response: Response): Promise<ProgramSummaryDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProgramSummaryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ProgramSummaryDto[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Created
     */
    trainingProgramPOST(body: TrainingProgramCreateDto | undefined): Promise<TrainingProgramDto> {
        let url_ = this.baseUrl + "/TrainingProgram";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTrainingProgramPOST(_response);
        });
    }

    protected processTrainingProgramPOST(response: Response): Promise<TrainingProgramDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = TrainingProgramDto.fromJS(resultData201);
            return result201;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TrainingProgramDto>(null as any);
    }

    /**
     * @return Success
     */
    trainingProgramGET(id: number): Promise<TrainingProgramDto> {
        let url_ = this.baseUrl + "/TrainingProgram/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTrainingProgramGET(_response);
        });
    }

    protected processTrainingProgramGET(response: Response): Promise<TrainingProgramDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TrainingProgramDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TrainingProgramDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return No Content
     */
    trainingProgramPUT(id: number, body: TrainingProgramUpdateDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/TrainingProgram/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTrainingProgramPUT(_response);
        });
    }

    protected processTrainingProgramPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return No Content
     */
    trainingProgramDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/TrainingProgram/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTrainingProgramDELETE(_response);
        });
    }

    protected processTrainingProgramDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return No Content
     */
    weeksPOST(programId: number, body: TrainingProgramWeekCreateDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/TrainingProgram/{programId}/weeks";
        if (programId === undefined || programId === null)
            throw new Error("The parameter 'programId' must be defined.");
        url_ = url_.replace("{programId}", encodeURIComponent("" + programId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processWeeksPOST(_response);
        });
    }

    protected processWeeksPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return No Content
     */
    weeksDELETE(programId: number, weekId: number): Promise<void> {
        let url_ = this.baseUrl + "/TrainingProgram/{programId}/weeks/{weekId}";
        if (programId === undefined || programId === null)
            throw new Error("The parameter 'programId' must be defined.");
        url_ = url_.replace("{programId}", encodeURIComponent("" + programId));
        if (weekId === undefined || weekId === null)
            throw new Error("The parameter 'weekId' must be defined.");
        url_ = url_.replace("{weekId}", encodeURIComponent("" + weekId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processWeeksDELETE(_response);
        });
    }

    protected processWeeksDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return No Content
     */
    weeksPUT(programId: number, weekId: number, body: TrainingProgramWeekUpdateDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/TrainingProgram/{programId}/weeks/{weekId}";
        if (programId === undefined || programId === null)
            throw new Error("The parameter 'programId' must be defined.");
        url_ = url_.replace("{programId}", encodeURIComponent("" + programId));
        if (weekId === undefined || weekId === null)
            throw new Error("The parameter 'weekId' must be defined.");
        url_ = url_.replace("{weekId}", encodeURIComponent("" + weekId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processWeeksPUT(_response);
        });
    }

    protected processWeeksPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return No Content
     */
    workoutsPOST(programId: number, weekId: number, body: TrainingProgramWorkoutCreateDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/TrainingProgram/{programId}/weeks/{weekId}/workouts";
        if (programId === undefined || programId === null)
            throw new Error("The parameter 'programId' must be defined.");
        url_ = url_.replace("{programId}", encodeURIComponent("" + programId));
        if (weekId === undefined || weekId === null)
            throw new Error("The parameter 'weekId' must be defined.");
        url_ = url_.replace("{weekId}", encodeURIComponent("" + weekId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processWorkoutsPOST(_response);
        });
    }

    protected processWorkoutsPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return No Content
     */
    workoutsPUT(programId: number, weekId: number, workoutId: number, body: TrainingProgramWorkoutUpdateDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/TrainingProgram/{programId}/weeks/{weekId}/workouts/{workoutId}";
        if (programId === undefined || programId === null)
            throw new Error("The parameter 'programId' must be defined.");
        url_ = url_.replace("{programId}", encodeURIComponent("" + programId));
        if (weekId === undefined || weekId === null)
            throw new Error("The parameter 'weekId' must be defined.");
        url_ = url_.replace("{weekId}", encodeURIComponent("" + weekId));
        if (workoutId === undefined || workoutId === null)
            throw new Error("The parameter 'workoutId' must be defined.");
        url_ = url_.replace("{workoutId}", encodeURIComponent("" + workoutId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processWorkoutsPUT(_response);
        });
    }

    protected processWorkoutsPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return No Content
     */
    workoutsDELETE(programId: number, weekId: number, workoutId: number): Promise<void> {
        let url_ = this.baseUrl + "/TrainingProgram/{programId}/weeks/{weekId}/workouts/{workoutId}";
        if (programId === undefined || programId === null)
            throw new Error("The parameter 'programId' must be defined.");
        url_ = url_.replace("{programId}", encodeURIComponent("" + programId));
        if (weekId === undefined || weekId === null)
            throw new Error("The parameter 'weekId' must be defined.");
        url_ = url_.replace("{weekId}", encodeURIComponent("" + weekId));
        if (workoutId === undefined || workoutId === null)
            throw new Error("The parameter 'workoutId' must be defined.");
        url_ = url_.replace("{workoutId}", encodeURIComponent("" + workoutId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processWorkoutsDELETE(_response);
        });
    }

    protected processWorkoutsDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return No Content
     */
    exercisesPOST(programId: number, weekId: number, workoutId: number, body: TrainingProgramExerciseCreateDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/TrainingProgram/{programId}/weeks/{weekId}/workouts/{workoutId}/exercises";
        if (programId === undefined || programId === null)
            throw new Error("The parameter 'programId' must be defined.");
        url_ = url_.replace("{programId}", encodeURIComponent("" + programId));
        if (weekId === undefined || weekId === null)
            throw new Error("The parameter 'weekId' must be defined.");
        url_ = url_.replace("{weekId}", encodeURIComponent("" + weekId));
        if (workoutId === undefined || workoutId === null)
            throw new Error("The parameter 'workoutId' must be defined.");
        url_ = url_.replace("{workoutId}", encodeURIComponent("" + workoutId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processExercisesPOST(_response);
        });
    }

    protected processExercisesPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return No Content
     */
    exercisesPUT(programId: number, weekId: number, workoutId: number, exerciseId: number, body: TrainingProgramExerciseUpdateDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/TrainingProgram/{programId}/weeks/{weekId}/workouts/{workoutId}/exercises/{exerciseId}";
        if (programId === undefined || programId === null)
            throw new Error("The parameter 'programId' must be defined.");
        url_ = url_.replace("{programId}", encodeURIComponent("" + programId));
        if (weekId === undefined || weekId === null)
            throw new Error("The parameter 'weekId' must be defined.");
        url_ = url_.replace("{weekId}", encodeURIComponent("" + weekId));
        if (workoutId === undefined || workoutId === null)
            throw new Error("The parameter 'workoutId' must be defined.");
        url_ = url_.replace("{workoutId}", encodeURIComponent("" + workoutId));
        if (exerciseId === undefined || exerciseId === null)
            throw new Error("The parameter 'exerciseId' must be defined.");
        url_ = url_.replace("{exerciseId}", encodeURIComponent("" + exerciseId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processExercisesPUT(_response);
        });
    }

    protected processExercisesPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return No Content
     */
    exercisesDELETE(programId: number, weekId: number, workoutId: number, exerciseId: number): Promise<void> {
        let url_ = this.baseUrl + "/TrainingProgram/{programId}/weeks/{weekId}/workouts/{workoutId}/exercises/{exerciseId}";
        if (programId === undefined || programId === null)
            throw new Error("The parameter 'programId' must be defined.");
        url_ = url_.replace("{programId}", encodeURIComponent("" + programId));
        if (weekId === undefined || weekId === null)
            throw new Error("The parameter 'weekId' must be defined.");
        url_ = url_.replace("{weekId}", encodeURIComponent("" + weekId));
        if (workoutId === undefined || workoutId === null)
            throw new Error("The parameter 'workoutId' must be defined.");
        url_ = url_.replace("{workoutId}", encodeURIComponent("" + workoutId));
        if (exerciseId === undefined || exerciseId === null)
            throw new Error("The parameter 'exerciseId' must be defined.");
        url_ = url_.replace("{exerciseId}", encodeURIComponent("" + exerciseId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processExercisesDELETE(_response);
        });
    }

    protected processExercisesDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    getWeatherForecast(): Promise<WeatherForecast[]> {
        let url_ = this.baseUrl + "/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetWeatherForecast(_response);
        });
    }

    protected processGetWeatherForecast(response: Response): Promise<WeatherForecast[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WeatherForecast[]>(null as any);
    }

    /**
     * @return Success
     */
    workoutAll(): Promise<WorkoutDto[]> {
        let url_ = this.baseUrl + "/Workout";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processWorkoutAll(_response);
        });
    }

    protected processWorkoutAll(response: Response): Promise<WorkoutDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WorkoutDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WorkoutDto[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Created
     */
    workoutPOST(body: WorkoutCreateDto | undefined): Promise<WorkoutDto> {
        let url_ = this.baseUrl + "/Workout";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processWorkoutPOST(_response);
        });
    }

    protected processWorkoutPOST(response: Response): Promise<WorkoutDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = WorkoutDto.fromJS(resultData201);
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WorkoutDto>(null as any);
    }

    /**
     * @return Success
     */
    workoutGET(id: number): Promise<WorkoutDto> {
        let url_ = this.baseUrl + "/Workout/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processWorkoutGET(_response);
        });
    }

    protected processWorkoutGET(response: Response): Promise<WorkoutDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WorkoutDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WorkoutDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return No Content
     */
    workoutPUT(id: number, body: WorkoutCreateDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Workout/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processWorkoutPUT(_response);
        });
    }

    protected processWorkoutPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return No Content
     */
    workoutDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/Workout/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processWorkoutDELETE(_response);
        });
    }

    protected processWorkoutDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param ids (optional) 
     * @return Success
     */
    workoutsByIds(ids: number[] | undefined): Promise<WorkoutDto[]> {
        let url_ = this.baseUrl + "/Workout/workoutsByIds?";
        if (ids === null)
            throw new Error("The parameter 'ids' cannot be null.");
        else if (ids !== undefined)
            ids && ids.forEach(item => { url_ += "ids=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processWorkoutsByIds(_response);
        });
    }

    protected processWorkoutsByIds(response: Response): Promise<WorkoutDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WorkoutDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WorkoutDto[]>(null as any);
    }

    /**
     * @return No Content
     */
    start(id: number): Promise<void> {
        let url_ = this.baseUrl + "/Workout/{id}/start";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processStart(_response);
        });
    }

    protected processStart(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return No Content
     */
    complete(id: number): Promise<void> {
        let url_ = this.baseUrl + "/Workout/{id}/complete";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processComplete(_response);
        });
    }

    protected processComplete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class DateOnly implements IDateOnly {
    year?: number;
    month?: number;
    day?: number;
    dayOfWeek?: DayOfWeek;
    readonly dayOfYear?: number;
    readonly dayNumber?: number;

    constructor(data?: IDateOnly) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.year = _data["year"];
            this.month = _data["month"];
            this.day = _data["day"];
            this.dayOfWeek = _data["dayOfWeek"];
            (<any>this).dayOfYear = _data["dayOfYear"];
            (<any>this).dayNumber = _data["dayNumber"];
        }
    }

    static fromJS(data: any): DateOnly {
        data = typeof data === 'object' ? data : {};
        let result = new DateOnly();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["year"] = this.year;
        data["month"] = this.month;
        data["day"] = this.day;
        data["dayOfWeek"] = this.dayOfWeek;
        data["dayOfYear"] = this.dayOfYear;
        data["dayNumber"] = this.dayNumber;
        return data;
    }
}

export interface IDateOnly {
    year?: number;
    month?: number;
    day?: number;
    dayOfWeek?: DayOfWeek;
    dayOfYear?: number;
    dayNumber?: number;
}

export enum DayOfWeek {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
}

export class ExerciseCreateDto implements IExerciseCreateDto {
    name!: string;
    description?: string | undefined;
    muscleIds?: number[] | undefined;

    constructor(data?: IExerciseCreateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
            if (Array.isArray(_data["muscleIds"])) {
                this.muscleIds = [] as any;
                for (let item of _data["muscleIds"])
                    this.muscleIds!.push(item);
            }
        }
    }

    static fromJS(data: any): ExerciseCreateDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExerciseCreateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        if (Array.isArray(this.muscleIds)) {
            data["muscleIds"] = [];
            for (let item of this.muscleIds)
                data["muscleIds"].push(item);
        }
        return data;
    }
}

export interface IExerciseCreateDto {
    name: string;
    description?: string | undefined;
    muscleIds?: number[] | undefined;
}

export class ExerciseDto implements IExerciseDto {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;

    constructor(data?: IExerciseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): ExerciseDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExerciseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}

export interface IExerciseDto {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
}

export class MuscleCreateDto implements IMuscleCreateDto {
    name!: string;
    category!: string;
    description?: string | undefined;
    exerciseIds?: number[] | undefined;

    constructor(data?: IMuscleCreateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.category = _data["category"];
            this.description = _data["description"];
            if (Array.isArray(_data["exerciseIds"])) {
                this.exerciseIds = [] as any;
                for (let item of _data["exerciseIds"])
                    this.exerciseIds!.push(item);
            }
        }
    }

    static fromJS(data: any): MuscleCreateDto {
        data = typeof data === 'object' ? data : {};
        let result = new MuscleCreateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["category"] = this.category;
        data["description"] = this.description;
        if (Array.isArray(this.exerciseIds)) {
            data["exerciseIds"] = [];
            for (let item of this.exerciseIds)
                data["exerciseIds"].push(item);
        }
        return data;
    }
}

export interface IMuscleCreateDto {
    name: string;
    category: string;
    description?: string | undefined;
    exerciseIds?: number[] | undefined;
}

export class MuscleDto implements IMuscleDto {
    id?: number;
    name?: string | undefined;
    category?: string | undefined;
    description?: string | undefined;

    constructor(data?: IMuscleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.category = _data["category"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): MuscleDto {
        data = typeof data === 'object' ? data : {};
        let result = new MuscleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["category"] = this.category;
        data["description"] = this.description;
        return data;
    }
}

export interface IMuscleDto {
    id?: number;
    name?: string | undefined;
    category?: string | undefined;
    description?: string | undefined;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export class ProgramSummaryDto implements IProgramSummaryDto {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
    weekCount?: number;
    isTemplate?: boolean;
    isPublic?: boolean;
    completedWorkoutCount?: number;

    constructor(data?: IProgramSummaryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.weekCount = _data["weekCount"];
            this.isTemplate = _data["isTemplate"];
            this.isPublic = _data["isPublic"];
            this.completedWorkoutCount = _data["completedWorkoutCount"];
        }
    }

    static fromJS(data: any): ProgramSummaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramSummaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["weekCount"] = this.weekCount;
        data["isTemplate"] = this.isTemplate;
        data["isPublic"] = this.isPublic;
        data["completedWorkoutCount"] = this.completedWorkoutCount;
        return data;
    }
}

export interface IProgramSummaryDto {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
    weekCount?: number;
    isTemplate?: boolean;
    isPublic?: boolean;
    completedWorkoutCount?: number;
}

export class SetCreateDto implements ISetCreateDto {
    exerciseId!: number;
    workoutId!: number;
    weight!: number;
    reps!: number;
    rpe?: number | undefined;
    notes?: string | undefined;

    constructor(data?: ISetCreateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.exerciseId = _data["exerciseId"];
            this.workoutId = _data["workoutId"];
            this.weight = _data["weight"];
            this.reps = _data["reps"];
            this.rpe = _data["rpe"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): SetCreateDto {
        data = typeof data === 'object' ? data : {};
        let result = new SetCreateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["exerciseId"] = this.exerciseId;
        data["workoutId"] = this.workoutId;
        data["weight"] = this.weight;
        data["reps"] = this.reps;
        data["rpe"] = this.rpe;
        data["notes"] = this.notes;
        return data;
    }
}

export interface ISetCreateDto {
    exerciseId: number;
    workoutId: number;
    weight: number;
    reps: number;
    rpe?: number | undefined;
    notes?: string | undefined;
}

export class SetDto implements ISetDto {
    id?: number;
    weight?: number;
    reps?: number;
    rpe?: number | undefined;
    isCompleted?: boolean;
    completedAt?: Date | undefined;
    notes?: string | undefined;
    exercise?: ExerciseDto;
    workoutId?: number;

    constructor(data?: ISetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.weight = _data["weight"];
            this.reps = _data["reps"];
            this.rpe = _data["rpe"];
            this.isCompleted = _data["isCompleted"];
            this.completedAt = _data["completedAt"] ? new Date(_data["completedAt"].toString()) : <any>undefined;
            this.notes = _data["notes"];
            this.exercise = _data["exercise"] ? ExerciseDto.fromJS(_data["exercise"]) : <any>undefined;
            this.workoutId = _data["workoutId"];
        }
    }

    static fromJS(data: any): SetDto {
        data = typeof data === 'object' ? data : {};
        let result = new SetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["weight"] = this.weight;
        data["reps"] = this.reps;
        data["rpe"] = this.rpe;
        data["isCompleted"] = this.isCompleted;
        data["completedAt"] = this.completedAt ? this.completedAt.toISOString() : <any>undefined;
        data["notes"] = this.notes;
        data["exercise"] = this.exercise ? this.exercise.toJSON() : <any>undefined;
        data["workoutId"] = this.workoutId;
        return data;
    }
}

export interface ISetDto {
    id?: number;
    weight?: number;
    reps?: number;
    rpe?: number | undefined;
    isCompleted?: boolean;
    completedAt?: Date | undefined;
    notes?: string | undefined;
    exercise?: ExerciseDto;
    workoutId?: number;
}

export class TrainingProgramCreateDto implements ITrainingProgramCreateDto {
    name!: string;
    description?: string | undefined;
    weekCount?: number;
    isTemplate?: boolean;
    isPublic?: boolean;
    parentProgramId?: number | undefined;

    constructor(data?: ITrainingProgramCreateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
            this.weekCount = _data["weekCount"];
            this.isTemplate = _data["isTemplate"];
            this.isPublic = _data["isPublic"];
            this.parentProgramId = _data["parentProgramId"];
        }
    }

    static fromJS(data: any): TrainingProgramCreateDto {
        data = typeof data === 'object' ? data : {};
        let result = new TrainingProgramCreateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        data["weekCount"] = this.weekCount;
        data["isTemplate"] = this.isTemplate;
        data["isPublic"] = this.isPublic;
        data["parentProgramId"] = this.parentProgramId;
        return data;
    }
}

export interface ITrainingProgramCreateDto {
    name: string;
    description?: string | undefined;
    weekCount?: number;
    isTemplate?: boolean;
    isPublic?: boolean;
    parentProgramId?: number | undefined;
}

export class TrainingProgramDto implements ITrainingProgramDto {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
    weekCount?: number;
    isTemplate?: boolean;
    isPublic?: boolean;
    weeks?: TrainingProgramWeekDto[] | undefined;
    completedWorkouts?: WorkoutDto[] | undefined;

    constructor(data?: ITrainingProgramDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.weekCount = _data["weekCount"];
            this.isTemplate = _data["isTemplate"];
            this.isPublic = _data["isPublic"];
            if (Array.isArray(_data["weeks"])) {
                this.weeks = [] as any;
                for (let item of _data["weeks"])
                    this.weeks!.push(TrainingProgramWeekDto.fromJS(item));
            }
            if (Array.isArray(_data["completedWorkouts"])) {
                this.completedWorkouts = [] as any;
                for (let item of _data["completedWorkouts"])
                    this.completedWorkouts!.push(WorkoutDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TrainingProgramDto {
        data = typeof data === 'object' ? data : {};
        let result = new TrainingProgramDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["weekCount"] = this.weekCount;
        data["isTemplate"] = this.isTemplate;
        data["isPublic"] = this.isPublic;
        if (Array.isArray(this.weeks)) {
            data["weeks"] = [];
            for (let item of this.weeks)
                data["weeks"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.completedWorkouts)) {
            data["completedWorkouts"] = [];
            for (let item of this.completedWorkouts)
                data["completedWorkouts"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface ITrainingProgramDto {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
    weekCount?: number;
    isTemplate?: boolean;
    isPublic?: boolean;
    weeks?: TrainingProgramWeekDto[] | undefined;
    completedWorkouts?: WorkoutDto[] | undefined;
}

export class TrainingProgramExerciseCreateDto implements ITrainingProgramExerciseCreateDto {
    exerciseId!: number;
    order?: number;
    sets?: number;
    reps?: number;
    weight?: number | undefined;
    rpe?: number | undefined;
    notes?: string | undefined;

    constructor(data?: ITrainingProgramExerciseCreateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.exerciseId = _data["exerciseId"];
            this.order = _data["order"];
            this.sets = _data["sets"];
            this.reps = _data["reps"];
            this.weight = _data["weight"];
            this.rpe = _data["rpe"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): TrainingProgramExerciseCreateDto {
        data = typeof data === 'object' ? data : {};
        let result = new TrainingProgramExerciseCreateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["exerciseId"] = this.exerciseId;
        data["order"] = this.order;
        data["sets"] = this.sets;
        data["reps"] = this.reps;
        data["weight"] = this.weight;
        data["rpe"] = this.rpe;
        data["notes"] = this.notes;
        return data;
    }
}

export interface ITrainingProgramExerciseCreateDto {
    exerciseId: number;
    order?: number;
    sets?: number;
    reps?: number;
    weight?: number | undefined;
    rpe?: number | undefined;
    notes?: string | undefined;
}

export class TrainingProgramExerciseDto implements ITrainingProgramExerciseDto {
    id?: number;
    order?: number;
    sets?: number;
    reps?: number;
    weight?: number | undefined;
    rpe?: number | undefined;
    notes?: string | undefined;
    exerciseId?: number;
    exercise?: ExerciseDto;

    constructor(data?: ITrainingProgramExerciseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.order = _data["order"];
            this.sets = _data["sets"];
            this.reps = _data["reps"];
            this.weight = _data["weight"];
            this.rpe = _data["rpe"];
            this.notes = _data["notes"];
            this.exerciseId = _data["exerciseId"];
            this.exercise = _data["exercise"] ? ExerciseDto.fromJS(_data["exercise"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TrainingProgramExerciseDto {
        data = typeof data === 'object' ? data : {};
        let result = new TrainingProgramExerciseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["order"] = this.order;
        data["sets"] = this.sets;
        data["reps"] = this.reps;
        data["weight"] = this.weight;
        data["rpe"] = this.rpe;
        data["notes"] = this.notes;
        data["exerciseId"] = this.exerciseId;
        data["exercise"] = this.exercise ? this.exercise.toJSON() : <any>undefined;
        return data;
    }
}

export interface ITrainingProgramExerciseDto {
    id?: number;
    order?: number;
    sets?: number;
    reps?: number;
    weight?: number | undefined;
    rpe?: number | undefined;
    notes?: string | undefined;
    exerciseId?: number;
    exercise?: ExerciseDto;
}

export class TrainingProgramExerciseUpdateDto implements ITrainingProgramExerciseUpdateDto {
    exerciseId!: number;
    order?: number;
    sets?: number;
    reps?: number;
    weight?: number | undefined;
    rpe?: number | undefined;
    notes?: string | undefined;

    constructor(data?: ITrainingProgramExerciseUpdateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.exerciseId = _data["exerciseId"];
            this.order = _data["order"];
            this.sets = _data["sets"];
            this.reps = _data["reps"];
            this.weight = _data["weight"];
            this.rpe = _data["rpe"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): TrainingProgramExerciseUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new TrainingProgramExerciseUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["exerciseId"] = this.exerciseId;
        data["order"] = this.order;
        data["sets"] = this.sets;
        data["reps"] = this.reps;
        data["weight"] = this.weight;
        data["rpe"] = this.rpe;
        data["notes"] = this.notes;
        return data;
    }
}

export interface ITrainingProgramExerciseUpdateDto {
    exerciseId: number;
    order?: number;
    sets?: number;
    reps?: number;
    weight?: number | undefined;
    rpe?: number | undefined;
    notes?: string | undefined;
}

export class TrainingProgramUpdateDto implements ITrainingProgramUpdateDto {
    name!: string;
    description?: string | undefined;
    weekCount?: number;
    isTemplate?: boolean;
    isPublic?: boolean;
    parentProgramId?: number | undefined;

    constructor(data?: ITrainingProgramUpdateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
            this.weekCount = _data["weekCount"];
            this.isTemplate = _data["isTemplate"];
            this.isPublic = _data["isPublic"];
            this.parentProgramId = _data["parentProgramId"];
        }
    }

    static fromJS(data: any): TrainingProgramUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new TrainingProgramUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        data["weekCount"] = this.weekCount;
        data["isTemplate"] = this.isTemplate;
        data["isPublic"] = this.isPublic;
        data["parentProgramId"] = this.parentProgramId;
        return data;
    }
}

export interface ITrainingProgramUpdateDto {
    name: string;
    description?: string | undefined;
    weekCount?: number;
    isTemplate?: boolean;
    isPublic?: boolean;
    parentProgramId?: number | undefined;
}

export class TrainingProgramWeekCreateDto implements ITrainingProgramWeekCreateDto {
    programId?: number;
    weekNumber?: number;
    notes?: string | undefined;

    constructor(data?: ITrainingProgramWeekCreateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.programId = _data["programId"];
            this.weekNumber = _data["weekNumber"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): TrainingProgramWeekCreateDto {
        data = typeof data === 'object' ? data : {};
        let result = new TrainingProgramWeekCreateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["programId"] = this.programId;
        data["weekNumber"] = this.weekNumber;
        data["notes"] = this.notes;
        return data;
    }
}

export interface ITrainingProgramWeekCreateDto {
    programId?: number;
    weekNumber?: number;
    notes?: string | undefined;
}

export class TrainingProgramWeekDto implements ITrainingProgramWeekDto {
    id?: number;
    weekNumber?: number;
    notes?: string | undefined;
    workouts?: TrainingProgramWorkoutDto[] | undefined;

    constructor(data?: ITrainingProgramWeekDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.weekNumber = _data["weekNumber"];
            this.notes = _data["notes"];
            if (Array.isArray(_data["workouts"])) {
                this.workouts = [] as any;
                for (let item of _data["workouts"])
                    this.workouts!.push(TrainingProgramWorkoutDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TrainingProgramWeekDto {
        data = typeof data === 'object' ? data : {};
        let result = new TrainingProgramWeekDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["weekNumber"] = this.weekNumber;
        data["notes"] = this.notes;
        if (Array.isArray(this.workouts)) {
            data["workouts"] = [];
            for (let item of this.workouts)
                data["workouts"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface ITrainingProgramWeekDto {
    id?: number;
    weekNumber?: number;
    notes?: string | undefined;
    workouts?: TrainingProgramWorkoutDto[] | undefined;
}

export class TrainingProgramWeekUpdateDto implements ITrainingProgramWeekUpdateDto {
    id?: number;
    weekNumber?: number;
    notes?: string | undefined;

    constructor(data?: ITrainingProgramWeekUpdateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.weekNumber = _data["weekNumber"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): TrainingProgramWeekUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new TrainingProgramWeekUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["weekNumber"] = this.weekNumber;
        data["notes"] = this.notes;
        return data;
    }
}

export interface ITrainingProgramWeekUpdateDto {
    id?: number;
    weekNumber?: number;
    notes?: string | undefined;
}

export class TrainingProgramWorkoutCreateDto implements ITrainingProgramWorkoutCreateDto {
    name?: string | undefined;
    dayOfWeek?: number;
    notes?: string | undefined;

    constructor(data?: ITrainingProgramWorkoutCreateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.dayOfWeek = _data["dayOfWeek"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): TrainingProgramWorkoutCreateDto {
        data = typeof data === 'object' ? data : {};
        let result = new TrainingProgramWorkoutCreateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["dayOfWeek"] = this.dayOfWeek;
        data["notes"] = this.notes;
        return data;
    }
}

export interface ITrainingProgramWorkoutCreateDto {
    name?: string | undefined;
    dayOfWeek?: number;
    notes?: string | undefined;
}

export class TrainingProgramWorkoutDto implements ITrainingProgramWorkoutDto {
    id?: number;
    dayOfWeek?: number;
    name?: string | undefined;
    exercises?: TrainingProgramExerciseDto[] | undefined;

    constructor(data?: ITrainingProgramWorkoutDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.dayOfWeek = _data["dayOfWeek"];
            this.name = _data["name"];
            if (Array.isArray(_data["exercises"])) {
                this.exercises = [] as any;
                for (let item of _data["exercises"])
                    this.exercises!.push(TrainingProgramExerciseDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TrainingProgramWorkoutDto {
        data = typeof data === 'object' ? data : {};
        let result = new TrainingProgramWorkoutDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["dayOfWeek"] = this.dayOfWeek;
        data["name"] = this.name;
        if (Array.isArray(this.exercises)) {
            data["exercises"] = [];
            for (let item of this.exercises)
                data["exercises"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface ITrainingProgramWorkoutDto {
    id?: number;
    dayOfWeek?: number;
    name?: string | undefined;
    exercises?: TrainingProgramExerciseDto[] | undefined;
}

export class TrainingProgramWorkoutUpdateDto implements ITrainingProgramWorkoutUpdateDto {
    name?: string | undefined;
    dayOfWeek?: number;
    notes?: string | undefined;

    constructor(data?: ITrainingProgramWorkoutUpdateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.dayOfWeek = _data["dayOfWeek"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): TrainingProgramWorkoutUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new TrainingProgramWorkoutUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["dayOfWeek"] = this.dayOfWeek;
        data["notes"] = this.notes;
        return data;
    }
}

export interface ITrainingProgramWorkoutUpdateDto {
    name?: string | undefined;
    dayOfWeek?: number;
    notes?: string | undefined;
}

export class WeatherForecast implements IWeatherForecast {
    date?: DateOnly;
    temperatureC?: number;
    readonly temperatureF?: number;
    summary?: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? DateOnly.fromJS(_data["date"]) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            (<any>this).temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toJSON() : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data;
    }
}

export interface IWeatherForecast {
    date?: DateOnly;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;
}

export class WorkoutCreateDto implements IWorkoutCreateDto {
    name!: string;
    programId?: number | undefined;
    description?: string | undefined;
    notes?: string | undefined;
    setIds?: number[] | undefined;

    constructor(data?: IWorkoutCreateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.programId = _data["programId"];
            this.description = _data["description"];
            this.notes = _data["notes"];
            if (Array.isArray(_data["setIds"])) {
                this.setIds = [] as any;
                for (let item of _data["setIds"])
                    this.setIds!.push(item);
            }
        }
    }

    static fromJS(data: any): WorkoutCreateDto {
        data = typeof data === 'object' ? data : {};
        let result = new WorkoutCreateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["programId"] = this.programId;
        data["description"] = this.description;
        data["notes"] = this.notes;
        if (Array.isArray(this.setIds)) {
            data["setIds"] = [];
            for (let item of this.setIds)
                data["setIds"].push(item);
        }
        return data;
    }
}

export interface IWorkoutCreateDto {
    name: string;
    programId?: number | undefined;
    description?: string | undefined;
    notes?: string | undefined;
    setIds?: number[] | undefined;
}

export class WorkoutDto implements IWorkoutDto {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
    isStarted?: boolean;
    isCompleted?: boolean;
    startedAt?: Date | undefined;
    completedAt?: Date | undefined;
    notes?: string | undefined;
    sets?: SetDto[] | undefined;

    constructor(data?: IWorkoutDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.isStarted = _data["isStarted"];
            this.isCompleted = _data["isCompleted"];
            this.startedAt = _data["startedAt"] ? new Date(_data["startedAt"].toString()) : <any>undefined;
            this.completedAt = _data["completedAt"] ? new Date(_data["completedAt"].toString()) : <any>undefined;
            this.notes = _data["notes"];
            if (Array.isArray(_data["sets"])) {
                this.sets = [] as any;
                for (let item of _data["sets"])
                    this.sets!.push(SetDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): WorkoutDto {
        data = typeof data === 'object' ? data : {};
        let result = new WorkoutDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["isStarted"] = this.isStarted;
        data["isCompleted"] = this.isCompleted;
        data["startedAt"] = this.startedAt ? this.startedAt.toISOString() : <any>undefined;
        data["completedAt"] = this.completedAt ? this.completedAt.toISOString() : <any>undefined;
        data["notes"] = this.notes;
        if (Array.isArray(this.sets)) {
            data["sets"] = [];
            for (let item of this.sets)
                data["sets"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IWorkoutDto {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
    isStarted?: boolean;
    isCompleted?: boolean;
    startedAt?: Date | undefined;
    completedAt?: Date | undefined;
    notes?: string | undefined;
    sets?: SetDto[] | undefined;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}